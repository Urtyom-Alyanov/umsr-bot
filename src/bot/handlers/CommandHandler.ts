import { BotConfig } from "../cfg.js";
import { CommandList } from "../kernel/CommandList.js";
import { DamerauLevenshteinDistance } from "../../shared/funcs/DamerauLevenshteinDistance.js";
import { range } from "../../shared/funcs/range.js";
import { Command } from "../../shared/types/Command.js";
import { ContextVar } from "../../shared/types/ContextVar.js";
import { MsgHandler } from "../../shared/types/MsgHandler.js";
import { PayloadType } from "../../shared/types/PayloadType.js";
import { ResponseMessage } from "../../shared/types/ResponseMessage.js";
import { SystemVar } from "../../shared/types/SystemVar.js";
import {getRandomId} from "vk-io";

export class CommandMsgHandler extends MsgHandler {
    public getName(): string {
        return "commands";
    }

    private SYS_VARS!: SystemVar;
    private CONTEXT_VARS!: ContextVar;

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
    private preparingPayload(payload: PayloadType): false | Omit<PayloadType, "command"> {
        if (!payload["command"]) return false;
        const newPayload = {};
        for (const [key, val] of Object.entries(payload)) {
            if (key === "command") continue;
            // @ts-ignore
            newPayload[key] = val;
        }
        return newPayload;
    }

    // –ü—É—Ç—å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    private payloadCommand(command: Command, payloadCommand: string, peerId: number) {
        for (const k of (command.keys.payload || [])) {
            if (payloadCommand !== k) continue;
            console.log(payloadCommand);
            this.SYS_VARS.isPayload = true;
            return this.getAnswerFromCommand(command, peerId);
        }
    }

    // –ü—É—Ç—å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    private payloadFlow(c: Command, payload: PayloadType, peerId: number) {
        const command = payload.command;
        const newPayload = this.preparingPayload(payload);
        if (!newPayload) return;
        this.CONTEXT_VARS.payload = newPayload;
        return this.payloadCommand(c, command, peerId);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ—Ñ–∏–∫—Å –∏ —É–¥–∞–ª–µ–Ω–∏–µ –µ–≥–æ
    private prefixMessage(msg: string) {
    if (this.conversationId !== this.senderId && !msg.startsWith("!"))
        return false;

    if (msg.startsWith("!"))
        return msg.slice(1);

    return msg;
    }

    // –ü–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤–µ - –ø—Ä–æ—à–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—Ç–æ—Ä–æ–π - –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ
    private damerauLevensgtein(k: string, words: string[]): [boolean, boolean] {
        let req_msg = "";
        let new_words = [];
        let distance = 0;
        const len_k = k.split(" ").length;
        if (len_k > words.length)
            return [false, false]
        let dist = 0;
        for (const kw of range(len_k)) {
            const a: string = words[kw];
            const b: string = k.split(" ")[kw];
            const dista = DamerauLevenshteinDistance(a.toLowerCase(), b.toLowerCase())
            if (dista === 0 || dista < a.length*BotConfig.TypoPercent)
                dist += 1;
            else
                dist = 0;
            if (dist === len_k)
                break;
        }
        if (dist === len_k) {
            req_msg = words.slice(0, len_k).join(" ");
            new_words = words.slice(len_k);
            distance = req_msg.length;
        }
        let d = DamerauLevenshteinDistance(req_msg.toLowerCase(), k.toLowerCase());
        if (d < distance) {
            if (d === 0) {
                return [true, false]
            } else if (d < req_msg.length*BotConfig.TypoPercent) {
                return [true, true]
            }
        }
        return [false, false]
    }
    
    // –ü—É—Ç—å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    private async messageFlow(c: Command, words: string[], peerId: number): Promise<ResponseMessage | undefined> {
        for (const k of (c.keys.messages || [])) {
            const [isThisCommand, isTypoError] = this.damerauLevensgtein(k, words);
            if (isThisCommand) {
                if (isTypoError) {
                    const { message, ...others } = await this.getAnswerFromCommand(c, peerId);
                    return {
                        message: message + BotConfig.KernelTexts.TypoPostMessage(k),
                        ...others
                    }
                }
                return this.getAnswerFromCommand(c, peerId);
            }
        }
    }    

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–≤–µ—Ç–∞ (–¥–ª—è –æ–±–æ–∏—Ö –ø–æ—Ç–æ–∫–æ–≤) –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    private async getAnswerFromCommand(c: Command, peerId: number): Promise<ResponseMessage> {
        if (!this.user) return {
            message: "üö´üë§ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        }
        if (c.accessLevel > this.user.AccessLevel) return {
            message: "üö´üë§ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞"
        }
        if (c.socialRating > this.user.SocialRating) return {
            message: "üö´üë§ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞"
        }
        let _message, _attachments, _keyboard
        await this.vk.api.messages.markAsRead({ peer_id: this.conversationId, mark_conversation_as_read: true });
        const intervalId = setInterval(async () =>
            await this.vk.api.messages.setActivity({ peer_id: this.conversationId, type: "typing" }), 5000);
        const timeoutId = setTimeout(async () =>
            await this.vk.api.messages.send({ message: "‚åö | –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ–ª—å—à–µ –æ–∂–∏–¥–∞–Ω–Ω—ã—Ö 5 —Å–µ–∫—É–Ω–¥... –ü—Ä–æ—Å–∏–º –∑–∞–ø–∞—Å—Ç–∏—Å—å —Ç–µ—Ä–ø–µ–Ω–∏–µ–º", peer_id: peerId, random_id: getRandomId() }), 5000)
        let {message, attachments, keyboard} = await c.process(this.SYS_VARS, this.CONTEXT_VARS)
        // if (from_id !== peer_id && (message || "").length > 1000)
        //     _message = "üö´ | –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ñ—ã –≤—ã—à–ª–æ —Å–ª–∏—à–∫–æ–º –æ–±—ä–µ–º–Ω—ã–º (–±–æ–ª–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤), –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –õ–°"
        // else
            _message = message;
        _attachments = attachments;
        _keyboard = keyboard;
        clearInterval(intervalId);
        clearTimeout(timeoutId);
        return {message: _message, attachments: _attachments, keyboard: _keyboard}
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç
    private initParams(msg: string) {
        this.CONTEXT_VARS = {
            words: msg.split("\n")[0].split(" ") || [],
            comment: msg.split("\n").slice(1).join("\n") || "",
            attachments: this.attachments,
            payload: (this.payload || {}),
            username: this.user.Name,
            user: this.user
        };
        this.SYS_VARS = {
            fromId: this.senderId,
            peerId: this.conversationId,
            groupId: this.groupId,
            isPayload: !!this.payload?.command
        };
    }

    public async process() {
        if (!this.message) return {};
        const msg = this.prefixMessage(this.message);  
        if (!msg) return {};
        this.initParams(msg);

        for (const c of CommandList) {
            if (!this.SYS_VARS.isPayload && this.CONTEXT_VARS.words.length > 0) {
                const resp = await this.messageFlow(c, this.CONTEXT_VARS.words, this.SYS_VARS.peerId);
                if (!resp) continue;
                return resp;
            } else if (this.CONTEXT_VARS.payload) {
                const resp = await this.payloadFlow(c, this.payload as PayloadType, this.SYS_VARS.peerId);
                if (!resp) continue;
                return resp;
            }
        }
        return {};
    }
}
