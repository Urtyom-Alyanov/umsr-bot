import {Command} from "../../../types/Command.js";
import {SystemVar} from "../../../types/SystemVar.js";
import {ContextVar} from "../../../types/ContextVar.js";
import {ResponseMessage} from "../../../types/ResponseMessage.js";
import {CommandList} from "../../kernel/CommandList.js";

export class ListCommand extends Command {
    messageKeys = ["–∫–æ–º–∞–Ω–¥—ã", "–ø–æ–º–æ—â—å", "—Å–ø–∏—Å–æ–∫"];
    payloadKeys = ["commands", "list", "help"];

    description = "–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é";

    async process(sys_vars: SystemVar, context: ContextVar): Promise<ResponseMessage> {
        return {
            message: `üìú | –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ Floco:\n\n` + CommandList.filter(c => c.showInList).map((c) => {
                return `¬∑ ${c.description} / –î–æ—Å—Ç—É–ø–Ω–æ —Å —Ä–µ–π—Ç–∏–Ω–≥–∞ ${c.socialRating} —Å —É—Ä–æ–≤–Ω–µ–º –¥–æ—Å—Ç—É–ø–∞ ${c.accessLevel} / –í—ã–∑–æ–≤: ${c.keys.messages.join(", ")}\n`
            }) + `\n –£—á—Ç–∏—Ç–µ, —á—Ç–æ –Ω–µ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ –µ—Å—Ç—å.`
        }
    }
}