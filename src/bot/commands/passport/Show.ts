import { Command } from "../../../shared/types/Command.js";
import { ContextVar } from "../../../shared/types/ContextVar.js";
import { ResponseMessage } from "../../../shared/types/ResponseMessage.js";
import { SystemVar } from "../../../shared/types/SystemVar.js";
import { AppDataSource } from "../../../database/index.js";
import { PassportEntity } from "../../../database/entities/PassportEntity.js";
import { UserEntity } from "../../../database/entities/UserEntity.js";
import {generatePassport} from "../../../shared/funcs/passport/generate.js";
import {PassportInputKeysEnum} from "../../../shared/types/PassportInputKeysEnum.js";
import crypto from "crypto-js";
import { BotConfig } from "../../cfg.js";

export class ShowPassportCommand extends Command {
    protected messageKeys: string[] = ["–ø–∞—Å–ø–æ—Ä—Ç", "–ø–æ–∫–∞–∑–∞—Ç—å –ø–∞—Å–ø–æ—Ä—Ç", "passport", "show passport"];
    protected payloadKeys: string[] = ["show_passport"];
    private passportRepo = AppDataSource.getRepository(PassportEntity);

    public description = "–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç, –ª–∏–±–æ —Å–æ–∑–¥–∞—Ç—å";

    public getPassport(user: UserEntity) {
        return this.passportRepo.findOneBy({ UserId: user.Id });
    }

    public async createPassport(user: UserEntity, isPersonalChat: boolean): Promise<ResponseMessage> {
        if (!isPersonalChat) return {
            message: "üìô | –í–∞—à –ø–∞—Å–ø–æ—Ä—Ç –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω. –î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –∑–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–∏–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ - https://vk.me/-193840305"
        };
        await this.handlerReroute(user, "passport_creating", {})
        return { message: "üìô | –í–∞—à –ø–∞—Å–ø–æ—Ä—Ç –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω. –ü–æ—ç—Ç–æ–º—É –Ω–∞—á–Ω—ë–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –í–∞—à–µ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω!\n–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–µ–Ω–µ–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –≤—Å—ë –±—É–¥–µ—Ç –≤–µ—Ä–Ω–æ, —Ç–æ –ø–∞—Å–ø–æ—Ä—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –î–µ–ª –õ–§–†, –≥–¥–µ –±—É–¥–µ—Ç —Ä–µ—à–µ–Ω–æ, —Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –º–µ—Ç–∫—É \"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ\", –ª–∏–±–æ –Ω–µ—Ç.\n\n–ù–∞—á–Ω—ë–º —Å –í–∞—à–µ–≥–æ –∏–º–µ–Ω–∏. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ –∏–º—è (–Ω–µ —Ñ–∞–º–∏–ª–∏—è –∏ –Ω–µ –æ—Ç—á–µ—Å—Ç–≤–æ) –≤ —Å–ª–µ–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏." }
    }

    public async process(sys_vars: SystemVar, context: ContextVar): Promise<ResponseMessage> {
         const passport = await this.getPassport(context.user);
         if(!passport)
            return this.createPassport(context.user, sys_vars.fromId === sys_vars.peerId);

         const inputsGen: Omit<Record<PassportInputKeysEnum, string>, "sign"> = {
             date: passport.Date,
             gender: passport.Gender.slice(0, 3).toUpperCase(),
             nation: passport.Nation,
             id: passport.Id,
             name: passport.Name,
             patronymicname: passport.PatronymicName,
             surname: passport.SurName,
             placeOfBirthCity: passport.City,
             placeOfBirthRepublic: passport.Republic
         }
         const sign = crypto.SHA256(JSON.stringify({ ...inputsGen, key: BotConfig.SecretKey })).toString();
         return {
             attachments: [
                 await this.vk.upload.messagePhoto(
                     {
                         peer_id: sys_vars.peerId,
                         source: {
                             value: await generatePassport<PassportInputKeysEnum>(
                                 {
                                     ...inputsGen,
                                     sign
                                },
                                 passport.Photo,
                                 passport.Stamps
                             )
                         }
                     }
                 )
             ],
             message: `üìñ | –í–∞—à –ø–∞—Å–ø–æ—Ä—Ç, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω!\n\nID –ø–∞—Å–ø–æ—Ä—Ç–∞: ${passport.Id}\n–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –ø–∞—Å–ø–æ—Ä—Ç–∞: ${sign}`
         }
    }
}