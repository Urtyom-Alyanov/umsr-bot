import { ContextVar } from "shared/types/ContextVar.js";
import { ResponseMessage } from "shared/types/ResponseMessage.js";
import {Command} from "../../../shared/types/Command.js";
import {SystemVar} from "../../../shared/types/SystemVar.js";
import {CommentState} from "../../handlers/CommentHandler.js";
import {AppDataSource} from "../../../database/index.js";
import {UserEntity} from "../../../database/entities/UserEntity.js";
import {PassportEntity} from "../../../database/entities/PassportEntity.js";
import {APIError, getRandomId, KeyboardBuilder, VKError} from "vk-io";
import {PassportCreateState} from "../../handlers/PassportCreatingHandler";

export class MVDPassportCommand extends Command {
    protected messageKeys: string[] = ["–º–≤–¥ –ø–∞—Å–ø–æ—Ä—Ç"];
    protected payloadKeys: string[] = ["passport_mvd"];

    public accessLevel = 3;
    public showInList = false;

    public async process(sys_vars: SystemVar, context: ContextVar): Promise<ResponseMessage> {
        const { payload, words, comment: _comment, user } = context;
        const { isPayload } = sys_vars;
        const status = payload?.status || words[2] as "accepted" | "declined" | "edit";
        const comment = isPayload ? payload?.comment : _comment;
        const userRepo = AppDataSource.getRepository(UserEntity);
        const passportRepo = AppDataSource.getRepository(PassportEntity);
        const id = payload?.id || words[3]?.toLowerCase();
        const Passport = await passportRepo.findOneBy({ Id: id });
        if (!Passport) return {
            message: "üìñ | –î–∞–Ω–Ω–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        }
        const confirmUser = await userRepo.findOneBy({ Id: Passport.UserId })
        if (!confirmUser) return {
            message: "–ñ–û–ü–ê"
        }
        if (!comment && (status === "edit" || status === "declined")) {
            await this.handlerReroute<CommentState>(
                user,
                "comment",
                { addPayloadProp: "comment", payload: { id, status, command: "passport_mvd" } }
            );
            return {
                message: "üìñ | –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω–∞–¥–æ –∏–∑–º–µ–Ω–∏—Ç—å.\n–ü–æ—Å–ª–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –µ—â—ë —Ä–∞–∑ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É"
            }
        }
        try {
            if (status === "edit") {
                await this.vk.api.messages.send({
                    message: `üìñ | –í–∞—à –ø–∞—Å–ø–æ—Ä—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É. –ú—ã –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∞–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–∞—Å–ø–æ—Ä—Ç–∞...\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n${comment}`,
                    random_id: getRandomId(),
                    peer_id: confirmUser.VkId
                });
                const splitedDate = Passport.Date.split(".");
                await this.handlerReroute<PassportCreateState>(confirmUser, "passport_creating", {
                    ...Passport,
                    Day: parseInt(splitedDate[0]),
                    Month: parseInt(splitedDate[1]),
                    Year: splitedDate[2],
                    Gender: (Passport.Gender === "–ú—É–∂—Å–∫–æ–π" ? 1 : 2),
                    PhotoUrl: (await this.vk.upload.messagePhoto({ source: { value: Passport.Photo }, peer_id: confirmUser.VkId })).largeSizeUrl || ""
                });
                return {
                    message: "üìñ | –ü–∞—Å–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É. –ñ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
                }
            }
            if (status === "declined") {
                await passportRepo.remove(Passport);
                await this.vk.api.messages.send({
                    message: "üìñ | –í–∞—à –ø–∞—Å–ø–æ—Ä—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü—Ä–∏—á–∏–Ω–∞:\n" + comment,
                    random_id: getRandomId(),
                    peer_id: confirmUser.VkId
                });
                return {
                    message: `üìñ | –ü–∞—Å–ø–æ—Ä—Ç [id${confirmUser.VkId}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${confirmUser.Name}] –æ—Ç–Ω—ã–Ω–µ –Ω–µ —è–≤—è–ª–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–º –ø–æ–ª–Ω–æ—Å—Ç—å—é. –ü—Ä–∏—á–∏–Ω–∞:\n ${comment}`
                }
            }
        } catch (error) {
            if (error instanceof APIError) {
                if (error.code === 901) {
                    return {
                        message: "‚ùå | –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è"
                    }
                }
            }
        }
        
        Passport.Stamps = ["accessed"];
        if(confirmUser.AccessLevel < 1) {
            confirmUser.AccessLevel = 1;
            await userRepo.save(confirmUser);
        };
        await passportRepo.save(Passport);
        await this.vk.api.messages.send({
            message: "üìñ | –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –í–∞—Å —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ –õ–æ–≤—É—à–∫–∏–Ω—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –†–µ—Å–ø—É–±–ª–∏–∫–∏! –° –ø–∞—Å–ø–æ—Ä—Ç–æ–º –õ–æ–≤—É—à–∫–∏–Ω—Å–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ, –ø–æ–∫–∞ —á—Ç–æ, —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≤—ã–±–æ—Ä–∞—Ö –∏ –ø–æ–ª—É—á–∞—Ç—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.",
            random_id: getRandomId(),
            peer_id: confirmUser.VkId,
            keyboard: new KeyboardBuilder().inline().callbackButton({ payload: { command: "show_passport" }, label: "–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Å–ø–æ—Ä—Ç" })
        });
        return {
            message: `üìñ | –ü–∞—Å–ø–æ—Ä—Ç—É ${Passport.Id} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω —à—Ç–∞–º–ø "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ". –¢–µ–ø–µ—Ä—å [id${confirmUser.VkId}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${confirmUser.Name}] —è–≤–ª—è–µ—Ç—Å—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º!`
        }
    }
};